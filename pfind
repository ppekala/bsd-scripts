#!/bin/sh

display_usage() {
	<< EOF >&2 cat
Usage: ${0##*/} [-b bdep] [-c category] [-m maintainer] [-n name pattern] [-g regexp]
       ${0##*/} [-g regexp] [-s master category/port]
       ${0##*/} [-N package name ]
       ${0##*/} -h

    -b - port needing certain build dependency
    -c - port category
    -g - find ports with Makefile containing grep pattern
    -h - show this help
    -m - port maintainer
    -n - ports name matching pattern
    -N - find port with exact package name
    -s - find slave ports

EOF
	exit 1
}

grep_files() {
	find . -name $1 -depth $2 -exec grep -l "$3" {} \; \
		2>/dev/null | sed 's|^.\/||'
}

pkgname_exact_match() {
	local flavor flavors pkgbase portdir

	for portdir in $*; do
		cd "$portdir"
		flavors=$(make -V FLAVORS)
		if [ "$flavors" ]; then
			for flavor in $flavors; do
				pkgbase=$(make FLAVOR=$flavor -V PKGBASE)
				if [ "$exact_match" = "$pkgbase" ]; then
					echo "$portdir@$flavor" | sed "s|$PORTSDIR/||"
					exit 0
				fi
			done
		else
			pkgbase=$(make -V PKGBASE)
			if [ "$exact_match" = "$pkgbase" ]; then
				echo "$portdir" | sed "s|$PORTSDIR/||"
				exit 0
			fi
		fi
	done
	exit 1
}

while getopts "b:c:g:hm:n:N:s:" option; do
	case $option in
	b)
		bdeps="$OPTARG" ;;
	c)
		category="$OPTARG" ;;
	g)
		string="$OPTARG" ;;
	m)
		maintainer="$OPTARG" ;;
	n)
		name="$OPTARG" ;;
	N)
		exact_match="$OPTARG" ;;
	s)
		master="$OPTARG" ;;
	*)
		display_usage
	esac
done

if [ "$exact_match" ]; then
	[ "$bdeps" -o "$category" -o "$maintainer" -o "$master" -o "$name" \
		-o "$string" ] && display_usage
	search_args="name=$exact_match-"
else
	[ ! "$bdeps" -a ! "$category" -a ! "$maintainer" -a ! "$name" \
		-a ! "$string" -a ! "$master" ] && display_usage
fi

readonly PORTSDIR=${PORTSDIR:-/usr/ports}
if [ ! -d "$PORTSDIR" ]; then
	echo "===> Ports directory not found: $PORTSDIR" >&2
	echo "===> Try setting PORTSDIR environment variable" >&2
	exit 1
fi

if [ "$category" -a ! -d "$PORTSDIR/$category" ]; then
	echo "===> No such category: $category" >&2
	exit 1
fi

if [ "$master" -a ! -d "$PORTSDIR/$master" ]; then
	echo "===> No such port: $PORTSDIR/$master" >&2
	exit 1
fi

[ ! "$bdeps" ] || search_args="bdeps=$bdeps"
[ ! "$category" ] || search_args="$search_args path=$category/"
[ ! "$maintainer" ] || search_args="$search_args maint=$maintainer"
[ ! "$name" ] || search_args="$search_args name=$name"
[ "$master" -a "$search_args" ] && display_usage

cd "$PORTSDIR"
if [ ! -f "$(make -VINDEXFILE)" ]; then
	echo "===> Fetching missing index file..."
	make fetchindex || exit 1
fi

if [ ! "$search_args" -a ! "$master" ]; then
	grep_files Makefile 3 "$string" | sed 's|\/Makefile$||' | sort
	exit
fi

if [ "$master" ]; then
	portdir=$(realpath "$PORTSDIR/$master")
	# search for slaves only in the same category for performance reasons
	cd "${portdir%/*}"
	candidates=$(for match in $(grep_files "Makefile*" 2 "${portdir##*/}"); do
		[ -d "${match%%/*}" ] || continue
		[ "${portdir##*/}" = "${match%%/*}" ] || echo ${match%%/*}
	done | sort -u)
	portdirs=$(for candidate in $candidates; do
		masterdir=$(realpath `make -C ${candidate%%/*} -V MASTERDIR`)
		[ "$portdir" = "$masterdir" ] && \
			echo $PORTSDIR/${master%/*}/$candidate
	done)
else
	portdirs=$(make quicksearch $search_args | awk '/^Path:/ { print $2 }')
	[ "$exact_match" ] && pkgname_exact_match $portdirs
fi

for portdir in $portdirs; do
	if [ "$string" ]; then
		[ -e $portdir/Makefile ] || continue
		[ "$(grep "$string" $portdir/Makefile)" ] || continue
	fi
	echo $portdir | sed "s|$PORTSDIR/||"
done
